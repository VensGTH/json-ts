"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonProperty = JsonProperty;
exports.deserialize = deserialize;
exports.serialize = serialize;
exports.DecoratorMetaData = void 0;

require("reflect-metadata");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Decorator variable name
*
* @const
*/
var METADATA_KEY = 'JsonProperty';
/**
* When custom mapping of a property is required.
*
* @interface
*/

/**
* DecoratorMetaData
* Model used for decoration parameters
*
* @class
* @property {string} name, indicate which json property needed to map
* @property {string} type, if the target is not primitive type, map it to corresponding class
*/
var DecoratorMetaData = function DecoratorMetaData(name, type) {
  _classCallCheck(this, DecoratorMetaData);

  this.name = name;
  this.type = type;
};
/**
* JsonProperty
*
* @function
* @param {IDecoratorMetaData<T>|string} metadata Encapsulate it to DecoratorMetaData for standard use
* @return {(target: object, targetKey: string | symbol) => void} Decorator function
*/


exports.DecoratorMetaData = DecoratorMetaData;

function JsonProperty(metadata) {
  if (!['string', 'object'].some(function (value) {
    return _typeof(metadata) === value;
  })) {
    throw new Error('JsonProperty decorator options must be of type \'string\' or \'IDecoratorMetaData\'!');
  }

  var decorator = typeof metadata === 'string' ? new DecoratorMetaData(metadata) : metadata;
  return Reflect.metadata(METADATA_KEY, decorator);
}

function deserializeProp(metadata, instance, json, key) {
  var index = metadata.name || key;
  var value = json ? json[index] : null;
  var options = Reflect.getMetadata(METADATA_KEY, instance, key);
  var type = Reflect.getMetadata('design:type', instance, key) || options.type;

  if (type == undefined) {
    return json[index];
  }

  if (Array.isArray(type) || type === Array) {
    if (options && options.type || _typeof(type) === 'object') {
      if (value && Array.isArray(value)) {
        return value.map(function (item) {
          return deserialize(options.type, item);
        });
      }

      return;
    } else {
      return value;
    }
  }

  if (!isPrimitive(type) && _typeof(value) === 'object' && !Array.isArray(value)) {
    return deserialize(type, value);
  }

  if (type === Boolean) {
    if (json[index] === undefined) {
      return undefined;
    }

    return Boolean(json[index]);
  }

  return json[index];
}
/**
* deserialize
*
* @function
* @param {{new():T}} type, class type which is going to initialize and hold a mapping json
* @param {Object} json, input json object which to be mapped
*
* @return {T} return mapped object
*/


function deserialize(type, json) {
  if (type == undefined || json == undefined) {
    return undefined;
  }

  if (_typeof(json) !== 'object') {
    return undefined;
  }

  if (Array.isArray(json)) {
    return json.map(function (value) {
      return deserialize(type, value);
    });
  }

  var instance = new type();
  Object.keys(instance).forEach(function (key) {
    var metadata = Reflect.getMetadata(METADATA_KEY, instance, key);
    var value = metadata ? metadata.converter ? metadata.converter.fromJson(json[metadata.name || key]) : deserializeProp(metadata, instance, json, key) : json[key];
    instance[key] = value;
  });
  return instance;
}
/**
* Serialize: Creates a JSON serializable object from the provided object instance.
* Only @JsonProperty decorated properties in the model instance are processed.
*
*/


function serialize(instance) {
  if (Array.isArray(instance)) {
    return instance.map(function (value) {
      return serialize(value);
    });
  }

  var obj = Object.create(null);
  Object.keys(instance).forEach(function (key) {
    var metadata = Reflect.getMetadata(METADATA_KEY, instance, key);
    obj[metadata && metadata.name ? metadata.name : key] = serializeProperty(metadata, instance[key]);
  });
  return obj;
}
/**
* Prepare a single property to be serialized to JSON.
*
* @param metadata
* @param prop
* @returns {any}
*/


function serializeProperty(metadata, prop) {
  if (prop == undefined) {
    return prop;
  }

  if (!metadata || metadata.exclude === true) {
    return;
  }

  if (metadata.converter) {
    return metadata.converter.toJson(prop);
  }

  if (!metadata.type) {
    return prop instanceof Date ? new Date(prop.getTime() - prop.getTimezoneOffset() * 60000).toISOString() : prop;
  }

  if (Array.isArray(prop)) {
    return prop.map(function (item) {
      return serialize(item);
    });
  }

  return serialize(prop);
}

function isPrimitive(obj) {
  return !!(['string', 'boolean', 'number'].indexOf(_typeof(obj)) > -1 || obj instanceof String || obj === String || obj instanceof Number || obj === Number || obj instanceof Boolean || obj === Boolean);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,